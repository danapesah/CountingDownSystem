{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\\\u05D3\\u05E0\\u05D4 \\u05E4\\u05E1\\u05D7\\\\Desktop\\\\FinalProject\\\\final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\\\u05D3\\u05E0\\u05D4 \\u05E4\\u05E1\\u05D7\\\\Desktop\\\\FinalProject\\\\final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { CONSTANTS } from \"../Actions\";\nimport * as moment from 'moment'; //all the changes are made from here\n\nlet listID = 2;\nlet cardID = 6; // const previnitialState = {\n//     startTimer: moment({hours: 19, minutes: 30}),\n//     cardsLists: [\n//     {\n//         title:  \" list 1 \",\n//         id: 'list-${0}',\n//         cards: [\n//         {   id:'cards-${0}',\n//             text: \"we created a static list&card 0 \" ,\n//             duration: moment.duration(53, 'minutes'),\n//         },\n//         {   id: 'cards-${1}',\n//         text: \"we created a static list&card 1 \",\n//         duration: moment.duration(30, 'minutes'),\n//     },\n//         ]\n//     },\n//     {\n//         title:  \" list 2 \",\n//         id: 'list-${1}',\n//         cards: [\n//             {   id: 'cards-${2}',\n//                 text: \"test 1 \" ,\n//                 duration: moment.duration(30, 'minutes'),\n//             },\n//             {   id: 'cards-${3}',\n//                 text: \"test 2 \",\n//                 duration: moment.duration(30, 'minutes'),\n//             },\n//             {   id: 'cards-${4}',\n//                 text: \"test 3 \",\n//                 duration: moment.duration(30, 'minutes'),\n//             },\n//             {   id: 'cards-${5}',\n//                 text: \"test 4 \",\n//                 duration: moment.duration(30, 'minutes'),\n//             },\n//         ]\n//     }\n// ]\n// }\n\nconst getCurrentCardIndex = (startTime, cardsList, currentTime = moment()) => {\n  const totalDuration = moment.duration(currentTime.diff(startTime));\n  let timePassed = moment.duration();\n\n  for (let i = 0; i < cardsList.length; i++) {\n    timePassed = timePassed.add(cardsList[i].duration);\n\n    if (timePassed > totalDuration) {\n      const timePassedInCard = timePassed.subtract(totalDuration);\n      const percentage = 1 - timePassedInCard / cardsList[i].duration;\n      return [i, percentage];\n    }\n  }\n\n  return [-1, 0];\n};\n\nconst getNewState = prevState => {\n  const newState = _objectSpread({}, prevState);\n\n  newState.cardsLists = newState.cardsLists.map(cardList => {\n    const _getCurrentCardIndex = getCurrentCardIndex(prevState.startTimer, cardList.cards),\n          _getCurrentCardIndex2 = _slicedToArray(_getCurrentCardIndex, 2),\n          idx = _getCurrentCardIndex2[0],\n          percentage = _getCurrentCardIndex2[1];\n\n    const newCardList = _objectSpread({}, cardList);\n\n    newCardList.cards = newCardList.cards.map((card, i) => _objectSpread({}, card, {\n      flag: i === idx,\n      percentage: i === idx ? percentage : idx === -1 || i < idx ? 1 : 0,\n      passed: idx === -1 || i < idx\n    }));\n    return newCardList;\n  });\n  return newState;\n};\n\nconst initialState = getNewState(previnitialState);\n\nconst listReducerCountDown = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.REFRESH:\n      return getNewState(state);\n\n    case CONSTANTS.ADD_LIST_COUNTDOWN:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: 'list-${listID}'\n      };\n      listID += 1;\n      return _objectSpread({}, state, {\n        cardsLists: [...state.cardsLists, newList]\n      });\n\n    case CONSTANTS.ADD_CARD_COUNTDOWN:\n      {\n        const newCard = {\n          text: action.payload.text,\n          id: 'card-${cardID}'\n        };\n        cardID += 1;\n        const newCardsList = state.cardsLists.map(list => {\n          if (list.id === action.payload.listID) {\n            return _objectSpread({}, list, {\n              cards: [...list.cards, newCard]\n            });\n          } else {\n            return list;\n          }\n        });\n        return _objectSpread({}, state, {\n          cardsLists: newCardsList\n        });\n      }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const _action$payload = action.payload,\n            droppableIdStart = _action$payload.droppableIdStart,\n            droppableIdEnd = _action$payload.droppableIdEnd,\n            droppableIndexStart = _action$payload.droppableIndexStart,\n            droppableIndexEnd = _action$payload.droppableIndexEnd,\n            draggableId = _action$payload.draggableId;\n\n      const newState = _objectSpread({}, state);\n\n      if (droppableIdStart === droppableIdEnd) {\n        const list = newState.cardsLists.find(list => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default listReducerCountDown;","map":{"version":3,"sources":["C:/Users/דנה פסח/Desktop/FinalProject/final/src/reducers/listReducerCountDown.js"],"names":["CONSTANTS","moment","listID","cardID","getCurrentCardIndex","startTime","cardsList","currentTime","totalDuration","duration","diff","timePassed","i","length","add","timePassedInCard","subtract","percentage","getNewState","prevState","newState","cardsLists","map","cardList","startTimer","cards","idx","newCardList","card","flag","passed","initialState","previnitialState","listReducerCountDown","state","action","type","REFRESH","ADD_LIST_COUNTDOWN","newList","title","payload","id","ADD_CARD_COUNTDOWN","newCard","text","newCardsList","list","DRAG_HAPPENED","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","find","splice"],"mappings":"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","sourcesContent":[" import {CONSTANTS} from \"../Actions\";\r\n import * as moment from 'moment';\r\n\r\n //all the changes are made from here\r\nlet listID = 2;\r\nlet cardID = 6;\r\n// const previnitialState = {\r\n//     startTimer: moment({hours: 19, minutes: 30}),\r\n//     cardsLists: [\r\n//     {\r\n//         title:  \" list 1 \",\r\n//         id: 'list-${0}',\r\n//         cards: [\r\n//         {   id:'cards-${0}',\r\n//             text: \"we created a static list&card 0 \" ,\r\n//             duration: moment.duration(53, 'minutes'),\r\n//         },\r\n//         {   id: 'cards-${1}',\r\n//         text: \"we created a static list&card 1 \",\r\n//         duration: moment.duration(30, 'minutes'),\r\n//     },\r\n//         ]\r\n//     },\r\n//     {\r\n//         title:  \" list 2 \",\r\n//         id: 'list-${1}',\r\n//         cards: [\r\n//             {   id: 'cards-${2}',\r\n//                 text: \"test 1 \" ,\r\n//                 duration: moment.duration(30, 'minutes'),\r\n//             },\r\n//             {   id: 'cards-${3}',\r\n//                 text: \"test 2 \",\r\n//                 duration: moment.duration(30, 'minutes'),\r\n//             },\r\n//             {   id: 'cards-${4}',\r\n//                 text: \"test 3 \",\r\n//                 duration: moment.duration(30, 'minutes'),\r\n//             },\r\n//             {   id: 'cards-${5}',\r\n//                 text: \"test 4 \",\r\n//                 duration: moment.duration(30, 'minutes'),\r\n//             },\r\n//         ]\r\n//     }\r\n// ]\r\n// }\r\n\r\nconst getCurrentCardIndex = (startTime, cardsList, currentTime=moment()) => {\r\n    const totalDuration = moment.duration(currentTime.diff(startTime));\r\n    let timePassed = moment.duration();\r\n    for (let i = 0; i < cardsList.length; i++) {\r\n        timePassed = timePassed.add(cardsList[i].duration)\r\n        if (timePassed > totalDuration) {\r\n            const timePassedInCard = timePassed.subtract(totalDuration);\r\n            const percentage = 1 - (timePassedInCard / cardsList[i].duration);\r\n            \r\n            return [i, percentage];\r\n        }\r\n    }\r\n    return [-1, 0];\r\n}\r\nconst getNewState = (prevState) => {\r\n    const newState = {...prevState};\r\n    newState.cardsLists = newState.cardsLists.map(cardList => {\r\n        const [idx, percentage] = getCurrentCardIndex(prevState.startTimer, cardList.cards);\r\n            const newCardList = {...cardList};\r\n            newCardList.cards = newCardList.cards.map((card, i) => ({...card, \r\n                flag: i === idx,\r\n                percentage: i === idx ? percentage : (idx === -1 || i < idx ? 1 : 0),\r\n                passed: idx === -1 || i < idx}));\r\n            return newCardList;\r\n    });\r\n    return newState;\r\n}\r\nconst initialState = getNewState(previnitialState)\r\n\r\n\r\n\r\n\r\nconst listReducerCountDown = (state = initialState, action)=> {\r\nswitch (action.type){\r\n    case CONSTANTS.REFRESH:\r\n        return getNewState(state);\r\n\r\n    case CONSTANTS.ADD_LIST_COUNTDOWN:\r\n        const newList = {\r\n            title: action.payload,\r\n            cards: [] , \r\n            id : 'list-${listID}', \r\n        }\r\n        listID+=1;\r\n        return{...state, cardsLists: [...state.cardsLists, newList]} ;\r\n\r\n    case CONSTANTS.ADD_CARD_COUNTDOWN:{\r\n        const newCard = {\r\n            text: action.payload.text,\r\n            id : 'card-${cardID}', \r\n        }\r\n        cardID +=1; \r\n       const newCardsList= state.cardsLists.map (list => {\r\n            if(list.id === action.payload.listID){\r\n                return{\r\n                    ...list,\r\n                    cards:[...list.cards, newCard]\r\n                }\r\n            }else{\r\n                return list;\r\n            }\r\n        });   \r\n\r\n        return {...state, cardsLists: newCardsList};\r\n        }\r\n    case CONSTANTS.DRAG_HAPPENED:\r\n        const {\r\n            droppableIdStart,\r\n            droppableIdEnd,\r\n            droppableIndexStart,\r\n            droppableIndexEnd,\r\n            draggableId,\r\n            }= action.payload;\r\n            const newState = {...state};\r\n\r\n            if (droppableIdStart === droppableIdEnd){\r\n              const list =newState.cardsLists.find(list=> droppableIdStart === list.id); \r\n              const card = list.cards.splice(droppableIndexStart,1)\r\n              list.cards.splice(droppableIndexEnd, 0 , ...card)            \r\n            }\r\n            return newState;\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\n\r\nexport default listReducerCountDown;"]},"metadata":{},"sourceType":"module"}