{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\\\u05D3\\u05E0\\u05D4 \\u05E4\\u05E1\\u05D7\\\\Desktop\\\\FinalProject\\\\final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { CONSTANTS } from \"../Actions\";\nlet listIDNew = 3;\nconst initialState = {\n  title: \"This is the title\",\n  OperationList: [{\n    listID: 0,\n    title: 'First List',\n    cards: [{\n      id: 0\n    }, {\n      id: 1\n    }]\n  }, {\n    listID: 1,\n    title: 'Second List',\n    cards: [{\n      id: 0\n    }, {\n      id: 1\n    }]\n  }],\n  StatusList: [{\n    listID: 0,\n    title: 'First List',\n    cards: [{\n      id: 0\n    }, {\n      id: 1\n    }]\n  }, {\n    listID: 1,\n    title: 'Second List',\n    cards: [{\n      id: 0\n    }, {\n      id: 1\n    }]\n  }]\n};\n\nconst rootReducer = (state = initialState, action) => {\n  let listID = 3;\n\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        listID: listIDNew,\n        title: \"List num\" + listIDNew,\n        cards: []\n      };\n      listIDNew++;\n      return _objectSpread({}, state, {\n        OperationList: [...state.OperationList, newList]\n      });\n\n    case CONSTANTS.ADD_CARD:\n      {\n        const newCard = {\n          id: 4\n        };\n        const newOperationList = state.OperationList.map(list => {\n          if (list.listID === action.payload.listID) {\n            return _objectSpread({}, list, {\n              cards: [...list.cards, newCard]\n            });\n          } else {\n            return list;\n          }\n        });\n        return _objectSpread({}, state, {\n          OperationList: newOperationList\n        });\n      }\n  }\n\n  return state;\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/דנה פסח/Desktop/FinalProject/final/src/reducers/rootReducer.js"],"names":["CONSTANTS","listIDNew","initialState","title","OperationList","listID","cards","id","StatusList","rootReducer","state","action","type","ADD_LIST","newList","ADD_CARD","newCard","newOperationList","map","list","payload"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,YAAxB;AACA,IAAIC,SAAS,GAAC,CAAd;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,mBADU;AAEjBC,EAAAA,aAAa,EAAE,CACZ;AACIC,IAAAA,MAAM,EAAC,CADX;AAEIF,IAAAA,KAAK,EAAE,YAFX;AAGIG,IAAAA,KAAK,EAAC,CACF;AAACC,MAAAA,EAAE,EAAC;AAAJ,KADE,EAEF;AAACA,MAAAA,EAAE,EAAC;AAAJ,KAFE;AAHV,GADY,EASZ;AACCF,IAAAA,MAAM,EAAC,CADR;AAECF,IAAAA,KAAK,EAAE,aAFR;AAGCG,IAAAA,KAAK,EAAC,CACF;AAACC,MAAAA,EAAE,EAAC;AAAJ,KADE,EAEF;AAACA,MAAAA,EAAE,EAAC;AAAJ,KAFE;AAHP,GATY,CAFE;AAoBjBC,EAAAA,UAAU,EAAE,CACR;AACIH,IAAAA,MAAM,EAAC,CADX;AAEIF,IAAAA,KAAK,EAAE,YAFX;AAGIG,IAAAA,KAAK,EAAC,CACF;AAACC,MAAAA,EAAE,EAAC;AAAJ,KADE,EAEF;AAACA,MAAAA,EAAE,EAAC;AAAJ,KAFE;AAHV,GADQ,EASR;AACCF,IAAAA,MAAM,EAAC,CADR;AAECF,IAAAA,KAAK,EAAE,aAFR;AAGCG,IAAAA,KAAK,EAAC,CACF;AAACC,MAAAA,EAAE,EAAC;AAAJ,KADE,EAEF;AAACA,MAAAA,EAAE,EAAC;AAAJ,KAFE;AAHP,GATQ;AApBK,CAArB;;AAwCA,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAiC;AACjD,MAAIN,MAAM,GAAC,CAAX;;AACA,UAAOM,MAAM,CAACC,IAAd;AACA,SAAKZ,SAAS,CAACa,QAAf;AACI,YAAMC,OAAO,GAAG;AACZT,QAAAA,MAAM,EAAGJ,SADG;AAEZE,QAAAA,KAAK,EAAC,aAAWF,SAFL;AAGZK,QAAAA,KAAK,EAAE;AAHK,OAAhB;AAKAL,MAAAA,SAAS;AACb,+BAAWS,KAAX;AAAiBN,QAAAA,aAAa,EAAE,CAAC,GAAGM,KAAK,CAACN,aAAV,EAAyBU,OAAzB;AAAhC;;AAEA,SAAKd,SAAS,CAACe,QAAf;AAAwB;AACpB,cAAMC,OAAO,GAAG;AACZT,UAAAA,EAAE,EAAC;AADS,SAAhB;AAID,cAAMU,gBAAgB,GAAEP,KAAK,CAACN,aAAN,CAAoBc,GAApB,CAAyBC,IAAI,IAAI;AACpD,cAAGA,IAAI,CAACd,MAAL,KAAgBM,MAAM,CAACS,OAAP,CAAef,MAAlC,EAAyC;AACrC,qCACOc,IADP;AAEIb,cAAAA,KAAK,EAAC,CAAC,GAAGa,IAAI,CAACb,KAAT,EAAgBU,OAAhB;AAFV;AAIH,WALD,MAKK;AACD,mBAAOG,IAAP;AACH;AACJ,SATsB,CAAxB;AAWC,iCAAWT,KAAX;AAAkBN,UAAAA,aAAa,EAAEa;AAAjC;AACC;AA3BL;;AAgCA,SAAOP,KAAP;AACH,CAnCD;;AAqCA,eAAeD,WAAf","sourcesContent":["import {CONSTANTS} from \"../Actions\";\r\nlet listIDNew=3;\r\nconst initialState = {\r\n    title: \"This is the title\",\r\n    OperationList: [\r\n       {\r\n           listID:0,\r\n           title: 'First List',\r\n           cards:[\r\n               {id:0},\r\n               {id:1}\r\n           ]\r\n       },\r\n       {\r\n        listID:1,\r\n        title: 'Second List',\r\n        cards:[\r\n            {id:0},\r\n            {id:1}\r\n        ]\r\n        }\r\n    ],\r\n    StatusList: [\r\n        {\r\n            listID:0,\r\n            title: 'First List',\r\n            cards:[\r\n                {id:0},\r\n                {id:1}\r\n            ]\r\n        },\r\n        {\r\n         listID:1,\r\n         title: 'Second List',\r\n         cards:[\r\n             {id:0},\r\n             {id:1}\r\n         ]\r\n         }\r\n     ]\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) =>{\r\n    let listID=3;\r\n    switch(action.type){\r\n    case CONSTANTS.ADD_LIST:\r\n        const newList = {\r\n            listID : listIDNew, \r\n            title:\"List num\"+listIDNew,\r\n            cards: [] , \r\n        }\r\n        listIDNew++; \r\n    return {...state,OperationList: [...state.OperationList, newList]};\r\n    \r\n    case CONSTANTS.ADD_CARD:{\r\n        const newCard = {\r\n            id:4\r\n        } \r\n       \r\n       const newOperationList= state.OperationList.map (list => {\r\n            if(list.listID === action.payload.listID){\r\n                return{\r\n                    ...list,\r\n                    cards:[...list.cards, newCard]\r\n                }\r\n            }else{\r\n                return list;\r\n            }\r\n        });   \r\n\r\n        return {...state, OperationList: newOperationList};\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}