{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\\\u05D3\\u05E0\\u05D4 \\u05E4\\u05E1\\u05D7\\\\Desktop\\\\FinalProject\\\\final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\\\u05D3\\u05E0\\u05D4 \\u05E4\\u05E1\\u05D7\\\\Desktop\\\\FinalProject\\\\final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { CONSTANTS } from \"../actions\";\nimport * as moment from 'moment'; //all the changes are made from here\n\nlet listID = 2;\nlet cardID = 6;\nconst previnitialState = {\n  startTimer: moment({\n    hours: 19,\n    minutes: 30\n  }),\n  cardsLists: [{\n    title: \" list 1 \",\n    id: 'list-${0}',\n    cards: [{\n      id: 'cards-${0}',\n      text: \"we created a static list&card 0 \",\n      duration: moment.duration(53, 'minutes')\n    }, {\n      id: 'cards-${1}',\n      text: \"we created a static list&card 1 \",\n      duration: moment.duration(30, 'minutes')\n    }]\n  }, {\n    title: \" list 2 \",\n    id: 'list-${1}',\n    cards: [{\n      id: 'cards-${2}',\n      text: \"test 1 \",\n      duration: moment.duration(30, 'minutes')\n    }, {\n      id: 'cards-${3}',\n      text: \"test 2 \",\n      duration: moment.duration(30, 'minutes')\n    }, {\n      id: 'cards-${4}',\n      text: \"test 3 \",\n      duration: moment.duration(30, 'minutes')\n    }, {\n      id: 'cards-${5}',\n      text: \"test 4 \",\n      duration: moment.duration(30, 'minutes')\n    }]\n  }]\n};\n\nconst getCurrentCardIndex = (startTime, cardsList, currentTime = moment()) => {\n  const totalDuration = moment.duration(currentTime.diff(startTime));\n  let timePassed = moment.duration();\n\n  for (let i = 0; i < cardsList.length; i++) {\n    timePassed = timePassed.add(cardsList[i].duration);\n\n    if (timePassed > totalDuration) {\n      const timePassedInCard = timePassed.subtract(totalDuration);\n      const percentage = 1 - timePassedInCard / cardsList[i].duration;\n      return [i, percentage];\n    }\n  }\n\n  return [-1, 0];\n};\n\nconst getNewState = prevState => {\n  const newState = _objectSpread({}, prevState);\n\n  newState.cardsLists = newState.cardsLists.map(cardList => {\n    const _getCurrentCardIndex = getCurrentCardIndex(prevState.startTimer, cardList.cards),\n          _getCurrentCardIndex2 = _slicedToArray(_getCurrentCardIndex, 2),\n          idx = _getCurrentCardIndex2[0],\n          percentage = _getCurrentCardIndex2[1];\n\n    const newCardList = _objectSpread({}, cardList);\n\n    newCardList.cards = newCardList.cards.map((card, i) => _objectSpread({}, card, {\n      flag: i === idx,\n      percentage: i === idx ? percentage : idx === -1 || i < idx ? 1 : 0,\n      passed: idx === -1 || i < idx\n    }));\n    return newCardList;\n  });\n  return newState;\n};\n\nconst initialState = getNewState(previnitialState);\n\nconst listReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.REFRESH:\n      return getNewState(state);\n\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: 'list-${listID}'\n      };\n      listID += 1;\n      return _objectSpread({}, state, {\n        cardsLists: [...state.cardsLists, newList]\n      });\n\n    case CONSTANTS.ADD_CARD:\n      {\n        const newCard = {\n          text: action.payload.text,\n          id: 'card-${cardID}'\n        };\n        cardID += 1;\n        const newCardsList = state.cardsLists.map(list => {\n          if (list.id === action.payload.listID) {\n            return _objectSpread({}, list, {\n              cards: [...list.cards, newCard]\n            });\n          } else {\n            return list;\n          }\n        });\n        return _objectSpread({}, state, {\n          cardsLists: newCardsList\n        });\n      }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const _action$payload = action.payload,\n            droppableIdStart = _action$payload.droppableIdStart,\n            droppableIdEnd = _action$payload.droppableIdEnd,\n            droppableIndexStart = _action$payload.droppableIndexStart,\n            droppableIndexEnd = _action$payload.droppableIndexEnd,\n            draggableId = _action$payload.draggableId;\n\n      const newState = _objectSpread({}, state);\n\n      if (droppableIdStart === droppableIdEnd) {\n        const list = newState.cardsLists.find(list => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default listReducer;","map":{"version":3,"sources":["C:/Users/דנה פסח/Desktop/FinalProject/final/src/reducers/listReducer.js"],"names":["CONSTANTS","moment","listID","cardID","previnitialState","startTimer","hours","minutes","cardsLists","title","id","cards","text","duration","getCurrentCardIndex","startTime","cardsList","currentTime","totalDuration","diff","timePassed","i","length","add","timePassedInCard","subtract","percentage","getNewState","prevState","newState","map","cardList","idx","newCardList","card","flag","passed","initialState","listReducer","state","action","type","REFRESH","ADD_LIST","newList","payload","ADD_CARD","newCard","newCardsList","list","DRAG_HAPPENED","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","find","splice"],"mappings":"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","sourcesContent":[" import {CONSTANTS} from \"../actions\";\r\n import * as moment from 'moment';\r\n\r\n //all the changes are made from here\r\nlet listID = 2;\r\nlet cardID = 6;\r\nconst previnitialState = {\r\n    startTimer: moment({hours: 19, minutes: 30}),\r\n    cardsLists: [\r\n    {\r\n        title:  \" list 1 \",\r\n        id: 'list-${0}',\r\n        cards: [\r\n        {   id:'cards-${0}',\r\n            text: \"we created a static list&card 0 \" ,\r\n            duration: moment.duration(53, 'minutes'),\r\n        },\r\n        {   id: 'cards-${1}',\r\n        text: \"we created a static list&card 1 \",\r\n        duration: moment.duration(30, 'minutes'),\r\n    },\r\n        ]\r\n    },\r\n    {\r\n        title:  \" list 2 \",\r\n        id: 'list-${1}',\r\n        cards: [\r\n            {   id: 'cards-${2}',\r\n                text: \"test 1 \" ,\r\n                duration: moment.duration(30, 'minutes'),\r\n            },\r\n            {   id: 'cards-${3}',\r\n                text: \"test 2 \",\r\n                duration: moment.duration(30, 'minutes'),\r\n            },\r\n            {   id: 'cards-${4}',\r\n                text: \"test 3 \",\r\n                duration: moment.duration(30, 'minutes'),\r\n            },\r\n            {   id: 'cards-${5}',\r\n                text: \"test 4 \",\r\n                duration: moment.duration(30, 'minutes'),\r\n            },\r\n        ]\r\n    }\r\n]\r\n}\r\n\r\nconst getCurrentCardIndex = (startTime, cardsList, currentTime=moment()) => {\r\n    const totalDuration = moment.duration(currentTime.diff(startTime));\r\n    let timePassed = moment.duration();\r\n    for (let i = 0; i < cardsList.length; i++) {\r\n        timePassed = timePassed.add(cardsList[i].duration)\r\n        if (timePassed > totalDuration) {\r\n            const timePassedInCard = timePassed.subtract(totalDuration);\r\n            const percentage = 1 - (timePassedInCard / cardsList[i].duration);\r\n            \r\n            return [i, percentage];\r\n        }\r\n    }\r\n    return [-1, 0];\r\n}\r\nconst getNewState = (prevState) => {\r\n    const newState = {...prevState};\r\n    newState.cardsLists = newState.cardsLists.map(cardList => {\r\n        const [idx, percentage] = getCurrentCardIndex(prevState.startTimer, cardList.cards);\r\n            const newCardList = {...cardList};\r\n            newCardList.cards = newCardList.cards.map((card, i) => ({...card, \r\n                flag: i === idx,\r\n                percentage: i === idx ? percentage : (idx === -1 || i < idx ? 1 : 0),\r\n                passed: idx === -1 || i < idx}));\r\n            return newCardList;\r\n    });\r\n    return newState;\r\n}\r\nconst initialState = getNewState(previnitialState)\r\n\r\n\r\n\r\n\r\nconst listReducer = (state = initialState, action)=> {\r\nswitch (action.type){\r\n    case CONSTANTS.REFRESH:\r\n        return getNewState(state);\r\n\r\n    case CONSTANTS.ADD_LIST:\r\n        const newList = {\r\n            title: action.payload,\r\n            cards: [] , \r\n            id : 'list-${listID}', \r\n        }\r\n        listID+=1;\r\n        return{...state, cardsLists: [...state.cardsLists, newList]} ;\r\n\r\n    case CONSTANTS.ADD_CARD:{\r\n        const newCard = {\r\n            text: action.payload.text,\r\n            id : 'card-${cardID}', \r\n        }\r\n        cardID +=1; \r\n       const newCardsList= state.cardsLists.map (list => {\r\n            if(list.id === action.payload.listID){\r\n                return{\r\n                    ...list,\r\n                    cards:[...list.cards, newCard]\r\n                }\r\n            }else{\r\n                return list;\r\n            }\r\n        });   \r\n\r\n        return {...state, cardsLists: newCardsList};\r\n        }\r\n    case CONSTANTS.DRAG_HAPPENED:\r\n        const {\r\n            droppableIdStart,\r\n            droppableIdEnd,\r\n            droppableIndexStart,\r\n            droppableIndexEnd,\r\n            draggableId,\r\n            }= action.payload;\r\n            const newState = {...state};\r\n\r\n            if (droppableIdStart === droppableIdEnd){\r\n              const list =newState.cardsLists.find(list=> droppableIdStart === list.id); \r\n              const card = list.cards.splice(droppableIndexStart,1)\r\n              list.cards.splice(droppableIndexEnd, 0 , ...card)            \r\n            }\r\n            return newState;\r\n\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\n\r\nexport default listReducer;"]},"metadata":{},"sourceType":"module"}