{"ast":null,"code":"// Load in dependencies\nvar computedStyle = require('computed-style');\n/**\n * Calculate the `line-height` of a given node\n * @param {HTMLElement} node Element to calculate line height of. Must be in the DOM.\n * @returns {Number} `line-height` of the element in pixels\n */\n\n\nfunction lineHeight(node) {\n  // Grab the line-height via style\n  var lnHeightStr = computedStyle(node, 'line-height');\n  var lnHeight = parseFloat(lnHeightStr, 10); // If the lineHeight did not contain a unit (i.e. it was numeric), convert it to ems (e.g. '2.3' === '2.3em')\n\n  if (lnHeightStr === lnHeight + '') {\n    // Save the old lineHeight style and update the em unit to the element\n    var _lnHeightStyle = node.style.lineHeight;\n    node.style.lineHeight = lnHeightStr + 'em'; // Calculate the em based height\n\n    lnHeightStr = computedStyle(node, 'line-height');\n    lnHeight = parseFloat(lnHeightStr, 10); // Revert the lineHeight style\n\n    if (_lnHeightStyle) {\n      node.style.lineHeight = _lnHeightStyle;\n    } else {\n      delete node.style.lineHeight;\n    }\n  } // If the lineHeight is in `pt`, convert it to pixels (4px for 3pt)\n  // DEV: `em` units are converted to `pt` in IE6\n  // Conversion ratio from https://developer.mozilla.org/en-US/docs/Web/CSS/length\n\n\n  if (lnHeightStr.indexOf('pt') !== -1) {\n    lnHeight *= 4;\n    lnHeight /= 3; // Otherwise, if the lineHeight is in `mm`, convert it to pixels (96px for 25.4mm)\n  } else if (lnHeightStr.indexOf('mm') !== -1) {\n    lnHeight *= 96;\n    lnHeight /= 25.4; // Otherwise, if the lineHeight is in `cm`, convert it to pixels (96px for 2.54cm)\n  } else if (lnHeightStr.indexOf('cm') !== -1) {\n    lnHeight *= 96;\n    lnHeight /= 2.54; // Otherwise, if the lineHeight is in `in`, convert it to pixels (96px for 1in)\n  } else if (lnHeightStr.indexOf('in') !== -1) {\n    lnHeight *= 96; // Otherwise, if the lineHeight is in `pc`, convert it to pixels (12pt for 1pc)\n  } else if (lnHeightStr.indexOf('pc') !== -1) {\n    lnHeight *= 16;\n  } // Continue our computation\n\n\n  lnHeight = Math.round(lnHeight); // If the line-height is \"normal\", calculate by font-size\n\n  if (lnHeightStr === 'normal') {\n    // Create a temporary node\n    var nodeName = node.nodeName;\n\n    var _node = document.createElement(nodeName);\n\n    _node.innerHTML = '&nbsp;'; // If we have a text area, reset it to only 1 row\n    // https://github.com/twolfson/line-height/issues/4\n\n    if (nodeName.toUpperCase() === 'TEXTAREA') {\n      _node.setAttribute('rows', '1');\n    } // Set the font-size of the element\n\n\n    var fontSizeStr = computedStyle(node, 'font-size');\n    _node.style.fontSize = fontSizeStr; // Remove default padding/border which can affect offset height\n    // https://github.com/twolfson/line-height/issues/4\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight\n\n    _node.style.padding = '0px';\n    _node.style.border = '0px'; // Append it to the body\n\n    var body = document.body;\n    body.appendChild(_node); // Assume the line height of the element is the height\n\n    var height = _node.offsetHeight;\n    lnHeight = height; // Remove our child from the DOM\n\n    body.removeChild(_node);\n  } // Return the calculated height\n\n\n  return lnHeight;\n} // Export lineHeight\n\n\nmodule.exports = lineHeight;","map":{"version":3,"sources":["C:/Users/דנה פסח/Desktop/FinalProject/New/final/node_modules/react-autosize-textarea/node_modules/line-height/lib/line-height.js"],"names":["computedStyle","require","lineHeight","node","lnHeightStr","lnHeight","parseFloat","_lnHeightStyle","style","indexOf","Math","round","nodeName","_node","document","createElement","innerHTML","toUpperCase","setAttribute","fontSizeStr","fontSize","padding","border","body","appendChild","height","offsetHeight","removeChild","module","exports"],"mappings":"AAAA;AACA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA3B;AAEA;;;;;;;AAKA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB;AACA,MAAIC,WAAW,GAAGJ,aAAa,CAACG,IAAD,EAAO,aAAP,CAA/B;AACA,MAAIE,QAAQ,GAAGC,UAAU,CAACF,WAAD,EAAc,EAAd,CAAzB,CAHwB,CAKxB;;AACA,MAAIA,WAAW,KAAKC,QAAQ,GAAG,EAA/B,EAAmC;AACjC;AACA,QAAIE,cAAc,GAAGJ,IAAI,CAACK,KAAL,CAAWN,UAAhC;AACAC,IAAAA,IAAI,CAACK,KAAL,CAAWN,UAAX,GAAwBE,WAAW,GAAG,IAAtC,CAHiC,CAKjC;;AACAA,IAAAA,WAAW,GAAGJ,aAAa,CAACG,IAAD,EAAO,aAAP,CAA3B;AACAE,IAAAA,QAAQ,GAAGC,UAAU,CAACF,WAAD,EAAc,EAAd,CAArB,CAPiC,CASjC;;AACA,QAAIG,cAAJ,EAAoB;AAClBJ,MAAAA,IAAI,CAACK,KAAL,CAAWN,UAAX,GAAwBK,cAAxB;AACD,KAFD,MAEO;AACL,aAAOJ,IAAI,CAACK,KAAL,CAAWN,UAAlB;AACD;AACF,GArBuB,CAuBxB;AACA;AACA;;;AACA,MAAIE,WAAW,CAACK,OAAZ,CAAoB,IAApB,MAA8B,CAAC,CAAnC,EAAsC;AACpCJ,IAAAA,QAAQ,IAAI,CAAZ;AACAA,IAAAA,QAAQ,IAAI,CAAZ,CAFoC,CAGtC;AACC,GAJD,MAIO,IAAID,WAAW,CAACK,OAAZ,CAAoB,IAApB,MAA8B,CAAC,CAAnC,EAAsC;AAC3CJ,IAAAA,QAAQ,IAAI,EAAZ;AACAA,IAAAA,QAAQ,IAAI,IAAZ,CAF2C,CAG7C;AACC,GAJM,MAIA,IAAID,WAAW,CAACK,OAAZ,CAAoB,IAApB,MAA8B,CAAC,CAAnC,EAAsC;AAC3CJ,IAAAA,QAAQ,IAAI,EAAZ;AACAA,IAAAA,QAAQ,IAAI,IAAZ,CAF2C,CAG7C;AACC,GAJM,MAIA,IAAID,WAAW,CAACK,OAAZ,CAAoB,IAApB,MAA8B,CAAC,CAAnC,EAAsC;AAC3CJ,IAAAA,QAAQ,IAAI,EAAZ,CAD2C,CAE7C;AACC,GAHM,MAGA,IAAID,WAAW,CAACK,OAAZ,CAAoB,IAApB,MAA8B,CAAC,CAAnC,EAAsC;AAC3CJ,IAAAA,QAAQ,IAAI,EAAZ;AACD,GA3CuB,CA6CxB;;;AACAA,EAAAA,QAAQ,GAAGK,IAAI,CAACC,KAAL,CAAWN,QAAX,CAAX,CA9CwB,CAgDxB;;AACA,MAAID,WAAW,KAAK,QAApB,EAA8B;AAC5B;AACA,QAAIQ,QAAQ,GAAGT,IAAI,CAACS,QAApB;;AACA,QAAIC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuBH,QAAvB,CAAZ;;AACAC,IAAAA,KAAK,CAACG,SAAN,GAAkB,QAAlB,CAJ4B,CAM5B;AACA;;AACA,QAAIJ,QAAQ,CAACK,WAAT,OAA2B,UAA/B,EAA2C;AACzCJ,MAAAA,KAAK,CAACK,YAAN,CAAmB,MAAnB,EAA2B,GAA3B;AACD,KAV2B,CAY5B;;;AACA,QAAIC,WAAW,GAAGnB,aAAa,CAACG,IAAD,EAAO,WAAP,CAA/B;AACAU,IAAAA,KAAK,CAACL,KAAN,CAAYY,QAAZ,GAAuBD,WAAvB,CAd4B,CAgB5B;AACA;AACA;;AACAN,IAAAA,KAAK,CAACL,KAAN,CAAYa,OAAZ,GAAsB,KAAtB;AACAR,IAAAA,KAAK,CAACL,KAAN,CAAYc,MAAZ,GAAqB,KAArB,CApB4B,CAsB5B;;AACA,QAAIC,IAAI,GAAGT,QAAQ,CAACS,IAApB;AACAA,IAAAA,IAAI,CAACC,WAAL,CAAiBX,KAAjB,EAxB4B,CA0B5B;;AACA,QAAIY,MAAM,GAAGZ,KAAK,CAACa,YAAnB;AACArB,IAAAA,QAAQ,GAAGoB,MAAX,CA5B4B,CA8B5B;;AACAF,IAAAA,IAAI,CAACI,WAAL,CAAiBd,KAAjB;AACD,GAjFuB,CAmFxB;;;AACA,SAAOR,QAAP;AACD,C,CAED;;;AACAuB,MAAM,CAACC,OAAP,GAAiB3B,UAAjB","sourcesContent":["// Load in dependencies\nvar computedStyle = require('computed-style');\n\n/**\n * Calculate the `line-height` of a given node\n * @param {HTMLElement} node Element to calculate line height of. Must be in the DOM.\n * @returns {Number} `line-height` of the element in pixels\n */\nfunction lineHeight(node) {\n  // Grab the line-height via style\n  var lnHeightStr = computedStyle(node, 'line-height');\n  var lnHeight = parseFloat(lnHeightStr, 10);\n\n  // If the lineHeight did not contain a unit (i.e. it was numeric), convert it to ems (e.g. '2.3' === '2.3em')\n  if (lnHeightStr === lnHeight + '') {\n    // Save the old lineHeight style and update the em unit to the element\n    var _lnHeightStyle = node.style.lineHeight;\n    node.style.lineHeight = lnHeightStr + 'em';\n\n    // Calculate the em based height\n    lnHeightStr = computedStyle(node, 'line-height');\n    lnHeight = parseFloat(lnHeightStr, 10);\n\n    // Revert the lineHeight style\n    if (_lnHeightStyle) {\n      node.style.lineHeight = _lnHeightStyle;\n    } else {\n      delete node.style.lineHeight;\n    }\n  }\n\n  // If the lineHeight is in `pt`, convert it to pixels (4px for 3pt)\n  // DEV: `em` units are converted to `pt` in IE6\n  // Conversion ratio from https://developer.mozilla.org/en-US/docs/Web/CSS/length\n  if (lnHeightStr.indexOf('pt') !== -1) {\n    lnHeight *= 4;\n    lnHeight /= 3;\n  // Otherwise, if the lineHeight is in `mm`, convert it to pixels (96px for 25.4mm)\n  } else if (lnHeightStr.indexOf('mm') !== -1) {\n    lnHeight *= 96;\n    lnHeight /= 25.4;\n  // Otherwise, if the lineHeight is in `cm`, convert it to pixels (96px for 2.54cm)\n  } else if (lnHeightStr.indexOf('cm') !== -1) {\n    lnHeight *= 96;\n    lnHeight /= 2.54;\n  // Otherwise, if the lineHeight is in `in`, convert it to pixels (96px for 1in)\n  } else if (lnHeightStr.indexOf('in') !== -1) {\n    lnHeight *= 96;\n  // Otherwise, if the lineHeight is in `pc`, convert it to pixels (12pt for 1pc)\n  } else if (lnHeightStr.indexOf('pc') !== -1) {\n    lnHeight *= 16;\n  }\n\n  // Continue our computation\n  lnHeight = Math.round(lnHeight);\n\n  // If the line-height is \"normal\", calculate by font-size\n  if (lnHeightStr === 'normal') {\n    // Create a temporary node\n    var nodeName = node.nodeName;\n    var _node = document.createElement(nodeName);\n    _node.innerHTML = '&nbsp;';\n\n    // If we have a text area, reset it to only 1 row\n    // https://github.com/twolfson/line-height/issues/4\n    if (nodeName.toUpperCase() === 'TEXTAREA') {\n      _node.setAttribute('rows', '1');\n    }\n\n    // Set the font-size of the element\n    var fontSizeStr = computedStyle(node, 'font-size');\n    _node.style.fontSize = fontSizeStr;\n\n    // Remove default padding/border which can affect offset height\n    // https://github.com/twolfson/line-height/issues/4\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight\n    _node.style.padding = '0px';\n    _node.style.border = '0px';\n\n    // Append it to the body\n    var body = document.body;\n    body.appendChild(_node);\n\n    // Assume the line height of the element is the height\n    var height = _node.offsetHeight;\n    lnHeight = height;\n\n    // Remove our child from the DOM\n    body.removeChild(_node);\n  }\n\n  // Return the calculated height\n  return lnHeight;\n}\n\n// Export lineHeight\nmodule.exports = lineHeight;\n"]},"metadata":{},"sourceType":"script"}